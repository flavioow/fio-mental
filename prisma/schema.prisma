generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

//
// Modelos Principais
//
model User {
    id       Int     @id @default(autoincrement())
    name     String
    email    String  @unique
    password String
    img      String?
    telefone String?
    role     Role

    // Relações
    employee     Employee?
    company      Company?
    psychologist Psychologist?

    accounts Account[]
    sessions Session[]
}

model Employee {
    id     Int    @id @default(autoincrement())
    cpf    String @unique
    userId Int    @unique
    user   User   @relation(fields: [userId], references: [id])

    // Relacionamento com a empresa
    companyId Int
    company   Company @relation(fields: [companyId], references: [id])

    // Relacionamento com questionário e consultas
    questionario Questionario?
    appointments Appointment[]
}

model Company {
    id       Int     @id @default(autoincrement())
    nome     String
    cnpj     String  @unique
    endereco String?
    setor    String?

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id])

    // Relacionamento com funcionários e psicólogos
    employees     Employee[]
    psychologists Psychologist[]
}

model Psychologist {
    id           Int     @id @default(autoincrement())
    cpf          String  @unique
    crp          String  @unique
    tempoAtuacao Int?
    descricao    String?

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id])

    // Relacionamento com a empresa
    companyId Int
    company   Company @relation(fields: [companyId], references: [id])

    // Relacionamento com disponibilidade e agendamentos
    availability PsychologistAvailability[]
    appointments Appointment[]
}

model Questionario {
    id               Int      @id @default(autoincrement())
    createdAt        DateTime @default(now())
    escalaEstresse   Int?
    motivoEstresse   String?
    equilibrio       String?
    reacaoProblema   String?
    espacoBemEstar   String?
    motivacao        String?
    desmotivacao     String?
    melhorHorario    String?
    focoColaborativo String?
    satisfacao       String?
    pedirAjuda       String?
    conflitos        String?
    senteOuvido      String?
    ouvido           String?
    tipoColega       String?
    ambienteCalmo    String?
    habilidades      String?
    oportunidades    String?
    confianca        String?
    palavra          String?
    mudanca          String?

    perfilPsicologico String?

    employeeId Int      @unique
    employee   Employee @relation(fields: [employeeId], references: [id])
}

//
// Modelos de Agendamento e Disponibilidade
//
model PsychologistAvailability {
    id             Int          @id @default(autoincrement())
    dayOfWeek      Int // 0 = Domingo ... 6 = Sábado
    startTime      String // Ex: "09:00"
    endTime        String // Ex: "18:00"
    psychologistId Int
    psychologist   Psychologist @relation(fields: [psychologistId], references: [id])

    @@unique([psychologistId, dayOfWeek, startTime, endTime])
    @@index([psychologistId])
}

model Appointment {
    id        Int               @id @default(autoincrement())
    date      DateTime // Data específica do agendamento
    startTime String // Ex: "09:00"
    endTime   String // Ex: "09:30"
    status    AppointmentStatus @default(SCHEDULED)
    notes     String?
    createdAt DateTime          @default(now())

    psychologistId Int
    psychologist   Psychologist @relation(fields: [psychologistId], references: [id])

    employeeId Int
    employee   Employee @relation(fields: [employeeId], references: [id])

    @@unique([psychologistId, date, startTime, endTime])
    @@index([psychologistId])
    @@index([employeeId])
}

//
// NextAuth Adapter Models
//
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//
// Enums
//
enum Role {
    EMPLOYEE
    COMPANY
    PSYCHOLOGIST
}

enum AppointmentStatus {
    SCHEDULED
    COMPLETED
    CANCELLED
}
